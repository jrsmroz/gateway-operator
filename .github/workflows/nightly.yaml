name: nightly

on:
  schedule:
    - cron: '30 3 * * *'
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RH_SCAN_REGISTRY: scan.connect.redhat.com
  RH_IMAGE_NAME: ospid-62c721d5ea2ed524ce4af71b/gateway-operator

jobs:
  build-push-images:
    environment: 'Docker Push'
    runs-on: ubuntu-latest
    steps:
      - name: Add standard tags
        run: |
          echo 'TAGS_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=nightly' >> $GITHUB_ENV
          echo "type=raw,value={{date 'YYYY-MM-DD'}}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Add Red Hat standard tags
        run: |
          echo 'REDHAT_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=nightly,suffix=-redhat' >> $GITHUB_ENV
          echo "type=raw,value={{date 'YYYY-MM-DD'}},suffix=-redhat" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to RH Scan Registry 
        uses: docker/login-action@v2
        with:
          registry: scan.connect.redhat.com
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: gateway-operator
          tags: ${{ env.TAGS_STANDARD }}

      - name: Docker meta (RedHat)
        id: meta_redhat
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_IMAGE_NAME }}
          flavor: |
            latest=false
          tags: ${{ env.REDHAT_STANDARD }}

      # - name: Build binary
      #   id: docker_build_binary
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: false
      #     file: Dockerfile
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
      #     target: builder
      #     platforms: linux/amd64, linux/arm64
      #     build-args: |
      #       TAG=${{ steps.meta.outputs.version }}
      #       COMMIT=${{ github.sha }}
      #       REPO_INFO=https://github.com/${{ github.repository }}.git
          
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: distroless
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Build and push Red Hat
        id: docker_build_redhat
        env:
          TAG: ${{ steps.meta.outputs.version }}
        uses: docker/build-push-action@v3
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta_redhat.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: redhat
          # platforms: linux/amd64, linux/arm64
          platforms: linux/amd64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

      - name: Setup DOCKER_HOME for preflight
        run: |
          echo "DOCKER_HOME=$HOME/.docker/" >> $GITHUB_ENV

      - name: Run preflight
        uses: addnab/docker-run-action@v3
        with:
          image: quay.io/opdev/preflight:stable
          options: -v ${{ env.DOCKER_HOME }}:/docker
          run: |
            /usr/local/bin/preflight check container ${{ steps.meta_redhat.outputs.tags }}" \
              --docker-config=/docker/config.json \
              --submit \
              --pyxis-api-token=${{ secrets.RH_PYXIS_TOKEN }} \
              --certification-project-id=${{ secrets.RH_PROJECT_ID }}
